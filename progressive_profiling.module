<?php

/**
 * @file
 *  Progressively collects data for the user account fields.
 */

/**
 * Implements hook_menu().
 */
function progressive_profiling_menu() {
  $base_admin_url = progressive_profiling_base_admin_url();
  $items[$base_admin_url] = array(
    'title' => 'Progressive profiling',
    'access arguments' => array('administer users'),
    'page callback' => 'progressive_profiling_fields',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'progressive_profiling.admin.inc',
    'description' => 'Configure the fields which should be part of the progressive profiling.',
    'weight' => 20,
  );
  $items[$base_admin_url.'/fields'] = array(
    'title' => 'Fields',
    'access arguments' => array('administer users'),
    'page callback' => 'progressive_profiling_fields',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'progressive_profiling.admin.inc'
  );
  $items[$base_admin_url.'/fields/add/%'] = array(
    'title' => 'Add field',
    'access arguments' => array('administer users'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('progressive_profiling_fields_add_edit_field_form', 6),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'progressive_profiling.admin.inc'
  );
  $items[$base_admin_url.'/fields/disable/%progressive_profiling_field'] = array(
    'title' => 'Disable field',
    'access arguments' => array('administer users'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('progressive_profiling_fields_disable_confirm', 6),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'progressive_profiling.admin.inc'
  );
  $items[$base_admin_url.'/fields/enable/%progressive_profiling_field'] = array(
    'title' => 'Enable field',
    'access arguments' => array('administer users'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('progressive_profiling_fields_enable_confirm', 6),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'progressive_profiling.admin.inc'
  );
  $items[$base_admin_url.'/fields/delete/%progressive_profiling_field'] = array(
    'title' => 'Delete field',
    'access arguments' => array('administer users'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('progressive_profiling_fields_delete_confirm', 6),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'progressive_profiling.admin.inc'
  );
  // Not needed at the moment.
  /*$items[$base_admin_url.'/fields/edit/%progressive_profiling_field'] = array(
    'title' => 'Edit field',
    'access arguments' => array('administer users'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('progressive_profiling_fields_add_edit_field_form', 6),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'progressive_profiling.admin.inc'
  );*/
  $items[$base_admin_url.'/fields/conditions/%progressive_profiling_field/add'] = array(
    'title' => 'Add field condition',
    'access arguments' => array('administer users'),
    'page callback' => 'progressive_profiling_fields_conditions_add',
    'page arguments' => array(6),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'progressive_profiling.admin.inc'
  );
  // This is the maximum depth of a menu in Drupal7: 9 parts (0 to 8)
  $items[$base_admin_url.'/fields/conditions/%progressive_profiling_field/edit/%'] = array(
    'title' => 'Edit field condition',
    'access arguments' => array('administer users'),
    'page callback' => 'progressive_profiling_fields_conditions_edit',
    'page arguments' => array(6, 8),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'progressive_profiling.admin.inc'
  );
  $items[$base_admin_url . '/settings'] = array(
    'title' => 'Settings',
    'access arguments' => array('administer users'),
    'page callback' => 'progressive_profiling_settings',
    'type' => MENU_LOCAL_TASK,
    'file' => 'progressive_profiling.admin.inc'
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function progressive_profiling_theme() {
  return array(
    'progressive_profiling_fields_table_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Helper function to return the base admin url of the module.
 */
function progressive_profiling_base_admin_url() {
  return 'admin/config/people/progressive_profilling';
}

/**
 * Returns an array with all the questions.
 */
function progressive_profiling_field_load_all() {
  $fields = &drupal_static(__FUNCTION__, NULL);
  if (!isset($fields)) {
    $query = db_select('progressive_profiling_fields', 'ppf');
    $query->fields('ppf');
    $query->orderBy('ppf.weight');
    $fields = $query->execute()->fetchAllAssoc('field_name');
    if (!empty($fields)) {
      // Unserialize the configuration column.
      foreach ($fields as $key => $row) {
        if (isset($row->configuration)) {
          $fields[$key]->configuration = unserialize($fields[$key]->configuration);
        }
      }
    }
  }
  return $fields;
}

/**
 * Loads a profiling field.
 *
 * @param $field_name
 *  The machine name of the field.
 */
function progressive_profiling_field_load($field_name) {
  $fields = progressive_profiling_field_load_all();
  return (isset($fields[$field_name]) ? $fields[$field_name] : FALSE);
}

/**
 * Saves a profile field to the database.
 *
 * @param $field
 *  An object that maps over the progressive_profiling_fields table.
 */
function progressive_profiling_field_save($field) {
  $primary_keys = array();
  if (empty($field->is_new)) {
    $primary_keys[] = 'field_name';
  }
  drupal_write_record('progressive_profiling_fields', $field, $primary_keys);
}

/**
 * Deletes (removes) a field from the profiling list.
 *
 * @param string $field_name
 *  The machine name of the field.
 */
function progressive_profiling_field_delete($field_name) {
  db_delete('progressive_profiling_fields')->condition('field_name', $field_name)->execute();
}

/**
 * Returns an array with all the fields which are available to be setup for
 * being part of the progressive profiling (meaning that they are not already
 * configured).
 *
 * This is used for example for the options list of the
 * progressive_profiling_add_field_form().
 */
function progressive_profiling_get_available_fields() {
  $field_info = field_info_instances('user', 'user');
  $profiling_fields = progressive_profiling_field_load_all();
  // Remove all the fields which are already profiling fields.
  return array_diff_key($field_info, $profiling_fields);
}

/**
 * Helper function to prepare an empty field object (which contains just the
 * field name).
 *
 * @param $field_object
 *  An object which usually contains just the field name (field_name).
 */
function progressive_profiling_field_object_prepare($field_object) {
  $field_object->status = 0;
  $field_object->weight = 0;
  $field_object->configuration = array();
  $field_object->is_new = TRUE;
}