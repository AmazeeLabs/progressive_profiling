<?php

/**
 * @file
 *  Progressively collects data for the user account fields.
 */

/**
 * Implements hook_permission().
 */
function progressive_profiling_permission() {
  return array(
    'skip progressive profiling' => array(
      'title' => t('Skip progressive profiling'),
      'description' => t('The users with this permisssions will not be asked to fill in any fields which are part of the progressive profiling.')
    ),
  );
}

/**
 * Implements hook_menu().
 */
function progressive_profiling_menu() {
  $base_admin_url = progressive_profiling_base_admin_url();
  $items[$base_admin_url] = array(
    'title' => 'Progressive profiling',
    'access arguments' => array('administer users'),
    'page callback' => 'progressive_profiling_fields',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'progressive_profiling.admin.fields.inc',
    'description' => 'Configure the fields which should be part of the progressive profiling.',
    'weight' => 20,
  );

  // Fields configuration.
  $items[$base_admin_url.'/fields'] = array(
    'title' => 'Fields',
    'access arguments' => array('administer users'),
    'page callback' => 'progressive_profiling_fields',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'progressive_profiling.admin.fields.inc',
    'weight' => -5,
  );
  $items[$base_admin_url.'/fields/add/%'] = array(
    'title' => 'Add field',
    'access arguments' => array('administer users'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('progressive_profiling_fields_add_edit_field_form', 6),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'progressive_profiling.admin.fields.inc'
  );
  $items[$base_admin_url.'/fields/disable/%progressive_profiling_field'] = array(
    'title' => 'Disable field',
    'access arguments' => array('administer users'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('progressive_profiling_fields_disable_confirm', 6),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'progressive_profiling.admin.fields.inc'
  );
  $items[$base_admin_url.'/fields/enable/%progressive_profiling_field'] = array(
    'title' => 'Enable field',
    'access arguments' => array('administer users'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('progressive_profiling_fields_enable_confirm', 6),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'progressive_profiling.admin.fields.inc'
  );
  $items[$base_admin_url.'/fields/delete/%progressive_profiling_field'] = array(
    'title' => 'Delete field',
    'access arguments' => array('administer users'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('progressive_profiling_fields_delete_confirm', 6),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'progressive_profiling.admin.fields.inc'
  );
  // Not needed at the moment.
  /*$items[$base_admin_url.'/fields/edit/%progressive_profiling_field'] = array(
    'title' => 'Edit field',
    'access arguments' => array('administer users'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('progressive_profiling_fields_add_edit_field_form', 6),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'progressive_profiling.admin.inc'
  );*/
  $items[$base_admin_url.'/fields/conditions/%progressive_profiling_field/add'] = array(
    'title' => 'Add field condition',
    'access arguments' => array('administer users'),
    'page callback' => 'progressive_profiling_fields_conditions_add',
    'page arguments' => array(6),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'progressive_profiling.admin.fields.inc'
  );
  // This is the maximum depth of a menu in Drupal7: 9 parts (0 to 8)
  $items[$base_admin_url.'/fields/conditions/%progressive_profiling_field/edit/%'] = array(
    'title' => 'Edit field condition',
    'access arguments' => array('administer users'),
    'page callback' => 'progressive_profiling_fields_conditions_edit',
    'page arguments' => array(6, 8),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'progressive_profiling.admin.fields.inc'
  );
  $items[$base_admin_url.'/fields/conditions/%progressive_profiling_field/edit_set'] = array(
    'title' => 'Conditions settings',
    'access arguments' => array('administer users'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('progressive_profiling_fields_conditions_settings_form', 6),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'progressive_profiling.admin.fields.inc'
  );

  // Areas configurations.
  $items[$base_admin_url.'/areas'] = array(
    'title' => 'Areas',
    'access arguments' => array('administer users'),
    'page callback' => 'progressive_profiling_areas',
    'type' => MENU_LOCAL_TASK,
    'file' => 'progressive_profiling.admin.areas.inc',
    'weight' => -3,
  );
  $items[$base_admin_url.'/areas/disable/%progressive_profiling_area'] = array(
    'title' => 'Disable area',
    'access arguments' => array('administer users'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('progressive_profiling_areas_disable_confirm', 6),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'progressive_profiling.admin.areas.inc'
  );
  $items[$base_admin_url.'/areas/enable/%progressive_profiling_area'] = array(
    'title' => 'Enable area',
    'access arguments' => array('administer users'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('progressive_profiling_areas_enable_confirm', 6),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'progressive_profiling.admin.areas.inc'
  );
  $items[$base_admin_url.'/areas/delete/%progressive_profiling_area'] = array(
    'title' => 'Delete area',
    'access arguments' => array('administer users'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('progressive_profiling_areas_delete_confirm', 6),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'progressive_profiling.admin.areas.inc'
  );
  $items[$base_admin_url.'/areas/edit/%progressive_profiling_area'] = array(
    'title' => 'Edit areas',
    'access arguments' => array('administer users'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('progressive_profiling_areas_add_edit_form', 6),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'progressive_profiling.admin.areas.inc'
  );
  $items[$base_admin_url.'/areas/conditions/%progressive_profiling_area/add'] = array(
    'title' => 'Add area condition',
    'access arguments' => array('administer users'),
    'page callback' => 'progressive_profiling_areas_conditions_add',
    'page arguments' => array(6),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'progressive_profiling.admin.areas.inc'
  );
  // This is the maximum depth of a menu in Drupal7: 9 parts (0 to 8)
  $items[$base_admin_url.'/areas/conditions/%progressive_profiling_area/edit/%'] = array(
    'title' => 'Edit area condition',
    'access arguments' => array('administer users'),
    'page callback' => 'progressive_profiling_areas_conditions_edit',
    'page arguments' => array(6, 8),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'progressive_profiling.admin.areas.inc'
  );

  // General settings.
  $items[$base_admin_url . '/settings'] = array(
    'title' => 'Settings',
    'access arguments' => array('administer users'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('progressive_profiling_settings_form'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'progressive_profiling.admin.inc',
    'weight' => -1,
  );
  $items[$base_admin_url . '/settings/condition/add'] = array(
    'title' => 'Add condition',
    'access arguments' => array('administer users'),
    'page callback' => 'progressive_profiling_settings_conditions_add',
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'progressive_profiling.admin.inc'
  );
  $items[$base_admin_url . '/settings/condition/edit/%'] = array(
    'title' => 'Edit condition',
    'access arguments' => array('administer users'),
    'page callback' => 'progressive_profiling_settings_conditions_edit',
    'page arguments' => array(7),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'progressive_profiling.admin.inc'
  );
  $items[$base_admin_url . '/settings/condition/edit_logic'] = array(
    'title' => 'Edit conditions logic',
    'access arguments' => array('administer users'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('progressive_profiling_settings_conditions_edit_logic_form'),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'progressive_profiling.admin.inc'
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function progressive_profiling_theme() {
  return array(
    'progressive_profiling_fields_table_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Helper function to return the base admin url of the module.
 */
function progressive_profiling_base_admin_url() {
  return 'admin/config/people/progressive_profilling';
}

/**
 * Returns an array with all the fields which are part of the progressive
 * profiling.
 */
function progressive_profiling_field_load_all() {
  $fields = &drupal_static(__FUNCTION__, NULL);
  if (!isset($fields)) {
    $query = db_select('progressive_profiling_fields', 'ppf');
    $query->fields('ppf');
    $query->orderBy('ppf.weight');
    $fields = $query->execute()->fetchAllAssoc('field_name');
    if (!empty($fields)) {
      // Unserialize the configuration column.
      foreach ($fields as $key => $row) {
        if (isset($row->configuration)) {
          $fields[$key]->configuration = unserialize($fields[$key]->configuration);
        }
      }
    }
  }
  return $fields;
}

/**
 * Helper function to load all the areas.
 */
function progressive_profiling_areas_load_all() {
  $areas = &drupal_static(__FUNCTION__, NULL);
  if (!isset($areas)) {
    $query = db_select('progressive_profiling_areas', 'ppa');
    $query->fields('ppa');
    $areas = $query->execute()->fetchAllAssoc('area_id');
    if (!empty($areas)) {
      // Unserialize the configuration column.
      foreach ($areas as $key => $row) {
        if (isset($row->configuration)) {
          $areas[$key]->configuration = unserialize($areas[$key]->configuration);
        }
      }
    }
  }
  return $areas;
}

/**
 * Loads a profiling field.
 *
 * @param $field_name
 *  The machine name of the field.
 */
function progressive_profiling_field_load($field_name) {
  $fields = progressive_profiling_field_load_all();
  return (isset($fields[$field_name]) ? $fields[$field_name] : FALSE);
}

/**
 * Loads an area.
 *
 * @param int $area_id
 *  The area id.
 */
function progressive_profiling_area_load($area_id) {
  $areas = progressive_profiling_areas_load_all();
  return (isset($areas[$area_id]) ? $areas[$area_id] : FALSE);
}

/**
 * Saves a profile field to the database.
 *
 * @param $field
 *  An object that maps over the progressive_profiling_fields table.
 */
function progressive_profiling_field_save($field) {
  $primary_keys = array();
  if (empty($field->is_new)) {
    $primary_keys[] = 'field_name';
  }
  drupal_write_record('progressive_profiling_fields', $field, $primary_keys);
}

/**
 * Saves an area to the database.
 *
 * @param $area
 *  An object that maps over the progressive_profiling_areas table.
 */
function progressive_profiling_area_save($area) {
  $primary_keys = array();
  if (empty($area->is_new)) {
    $primary_keys[] = 'area_id';
  }
  drupal_write_record('progressive_profiling_areas', $area, $primary_keys);
}

/**
 * Deletes (removes) a field from the profiling list.
 *
 * @param string $field_name
 *  The machine name of the field.
 */
function progressive_profiling_field_delete($field_name) {
  db_delete('progressive_profiling_fields')->condition('field_name', $field_name)->execute();
}

/**
 * Deletes (removes) an area from the profiling area list.
 *
 * @param int $area_id
 *  The id of the area.
 */
function progressive_profiling_area_delete($area_id) {
  db_delete('progressive_profiling_areas')->condition('area_id', $area_id)->execute();
}

/**
 * Returns an array with all the fields which are available to be setup for
 * being part of the progressive profiling (meaning that they are not already
 * configured).
 *
 * This is used for example for the options list of the
 * progressive_profiling_add_field_form().
 */
function progressive_profiling_get_available_fields() {
  $field_info = field_info_instances('user', 'user');
  $profiling_fields = progressive_profiling_field_load_all();
  // Remove all the fields which are already profiling fields.
  return array_diff_key($field_info, $profiling_fields);
}

/**
 * Helper function to prepare an empty field object (which contains just the
 * field name).
 *
 * @param $field_object
 *  An object which usually contains just the field name (field_name).
 */
function progressive_profiling_field_object_prepare($field_object) {
  $field_object->status = 0;
  $field_object->weight = 0;
  $field_object->configuration = array();
  $field_object->is_new = TRUE;
}

/**
 * Helper function to prepare an empty area object.
 *
 * @param object $area
 *  An usually empty object (but it can also contain already some properties).
 */
function progressive_profiling_area_object_prepare($area) {
  $area->status = 0;
  $area->configuration = array();
  $area->is_new = TRUE;
}

/**
 * Returns an array with all the contexts currently available for conditions.
 */
function progressive_profiling_available_contexts() {
  ctools_include('context');
  $contexts['logged-in-user'] = ctools_access_get_loggedin_context();
  $contexts['node'] = ctools_context_create_empty('entity:node');
  $contexts['node']->identifier = t('Node being viewed');
  $contexts['term'] = ctools_context_create_empty('entity:taxonomy_term');
  $contexts['term']->identifier = t('Term being viewed');
  return $contexts;
}

/**
 * Returns the real contexts for a path.
 *
 * @param object $account
 *  An user account object. Defaults to the current logged in user.
 *
 * @param string $path
 *  The path to check for. Defaults to $_GET['q']
 */
function progressive_profiling_get_contexts($account = NULL, $path = '') {
  ctools_include('context');
  if (empty($account)) {
    global $user;
    $account = user_load($user->uid);
  }
  if (empty($path)) {
    $path = $_GET['q'];
  }
  $contexts['logged-in-user'] = ctools_context_create('entity:user', $account);
  $arg = arg(NULL, $path);
  if ($arg[0] == 'node' && is_numeric($arg[1]) && (empty($arg[2]) || $arg[2] != 'edit')) {
    $contexts['node'] = ctools_context_create('entity:node', node_load($arg[1]));
  }
  elseif ($arg[0] == 'taxonomy' && $arg[1] == 'term' && is_numeric($arg[2]) && (empty($arg[3]) || $arg[3] != 'edit')) {
    $contexts['term'] = ctools_context_create('entity:taxonomy_term', taxonomy_term_load($arg[2]));
  }
  return $contexts;
}

/**
 * Implements hook_page_build().
 */
function progressive_profiling_page_build(&$page) {
  global $user;
  $account = user_load($user->uid);
  $profile_fields = progressive_profiling_check_for_fields($account);
  if (!empty($profile_fields)) {
    ctools_include('modal');
    ctools_modal_add_js();
    $resource_id = progressive_profiling_get_resource_id();
    $page['content']['#attached']['js'][] = drupal_get_path('module', 'progressive_profiling') . '/js/progressive_profiling.js';
    $page['content']['profile_form'] = array(
      'form' => drupal_get_form('progressive_profiling_form', $account, $profile_fields['profile_fields'], $profile_fields['area'], $resource_id),
    );
  }
}

/**
 * Form constructor for the profiling form.
 *
 * @param object $account
 *  The account for which the form is shown.
 *
 * @param array $profile_fields
 *  An array with the field names of the fields to be shown on the form.
 *
 * @param object $area
 *  The profiling area object.
 *
 * @param string $resource_id
 *  The id of the resource for which we generate the form.
 */
function progressive_profiling_form($form, &$form_state, $account, $profile_fields, $area, $resource_id) {
  $form['title'] = array(
    '#type' => 'item',
    '#markup' => !empty($area->configuration['form_title']) ? t($area->configuration['form_title']) : t('To access the content, please fill in the following fields.'),
  );
  $form['fields'] = array(
    '#prefix' => '<div id="progressive-profiling-fields">',
    '#suffix' => '</div>',
  );
  ctools_include('fields');
  foreach ($profile_fields as $profile_field) {
    $field_instance = field_info_instance('user', $profile_field, 'user');
    // All the fields in the profile form are required if the user chooses to
    // submit the form.
    $field_instance['required'] = TRUE;
    $form['fields'] += (array) ctools_field_invoke_field($field_instance, 'form', 'user', $account, $form, $form_state, array('default' => TRUE));
  }

  // @todo: should we leverage on the 'entity' object which is injected into the
  // form by the ctools_field_invoke_field() call?
  $form['account_id'] = array(
    '#type' => 'value',
    '#value' => $account->uid,
  );
  $form['profile_fields'] = array(
    '#type' => 'value',
    '#value' => $profile_fields,
  );
  $form['resource_id'] = array(
    '#type' => 'value',
    '#value' => $resource_id,
  );
  $form['area_id'] = array(
    '#type' => 'value',
    '#value' => $area->area_id,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    // @todo: maybe integrate with i18n here?
    '#value' => !empty($area->configuration['submit_button_text']) ? t($area->configuration['submit_button_text']) : t('Submit'),
    '#weight' => 50,
    '#ajax' => array(
      'callback' => 'progressive_profiling_form_ajax_callback',
      'wrapper' => 'progressive-profiling-fields',
    ),
  );
  return $form;
}

/**
 * Validate handler for the profile form.
 *
 * It just forwards the validation to field_attach_form_validate().
 */
function progressive_profiling_form_validate(&$form, &$form_state) {
  $account = user_load($form_state['values']['account_id']);
  field_attach_form_validate('user', $account, $form, $form_state);
}

/**
 * Submit handler for the profiling form.
 */
function progressive_profiling_form_submit(&$form, &$form_state) {
  $account = user_load($form_state['values']['account_id']);
  foreach ($form_state['values']['profile_fields'] as $field_name) {
    $account->{$field_name} = $form_state['values'][$field_name];
  }
  user_save($account);
  drupal_set_message(t('Your data has been saved.'));

  // Update also the last answered timestamp, and mark the resource id as being
  // accessible for the user all the time.
  db_merge('progressive_profiling_last_answer_time')
    ->key(array(
      'uid' => $form_state['values']['account_id'],
      'area_id' => $form_state['values']['area_id'],
      'resource_id' => $form_state['values']['resource_id']))
    ->fields(array(
      'uid' => $form_state['values']['account_id'],
      'area_id' => $form_state['values']['area_id'],
      'resource_id' => $form_state['values']['resource_id'],
      'timestamp' => REQUEST_TIME))
    ->execute();

  db_merge('progressive_profiling_resources_access')
    ->key(array('uid' => $form_state['values']['account_id'], 'resource_id' => $form_state['values']['resource_id']))
    ->fields(array('uid' => $form_state['values']['account_id'], 'resource_id' => $form_state['values']['resource_id']))
    ->execute();

  $form_state['submit_success'] = TRUE;
}

/**
 * Ajax callback for the profiling form submit.
 */
function progressive_profiling_form_ajax_callback($form, $form_state) {
  // If the submit was not successful then we just show the fields again.
  if (empty($form_state['submit_success'])) {
    return $form['fields'];
  }
  else {
    // Dismiss the modal and show the status messages.
    ctools_include('modal');
    $commands[] = ctools_modal_command_dismiss();
    $commands[] = ajax_command_prepend('section.main-content', theme('status_messages'));
    print ajax_render($commands);
    drupal_exit();
  }
}

/**
 * Returns the id of the resource available at a certain path.
 *
 * The current implementation will just use the path itself as the id.
 *
 * @param string $path
 *  The path of the resource. By default, it will be $_GET['q'].
 */
function progressive_profiling_get_resource_id($path = NULL) {
  if (empty($path)) {
    $path = $_GET['q'];
  }
  return 'path:' . $path;
}

/**
 * Checks which fields should be asked to the user, for a specific URL.
 *
 * @param object $account
 *  An user account object. Defaults to the current logged in user.
 *
 * @param string $path
 *  The path to check. Defaults to $_GET['q']
 */
function progressive_profiling_check_for_fields($account = NULL, $path = NULL) {
  // First, initialize the parameters with the default values if they are empty.
  if (empty($account)) {
    global $user;
    $account = user_load($user->uid);
  }
  if (empty($path)) {
    $path = $_GET['q'];
  }
  $resource_id = progressive_profiling_get_resource_id($path);
  $profile_fields = array();
  // When deciding if we show profiling fields, we do the following:
  // 1. Check first the general settings.
  // 2. Check if there is any area that matches the request.
  // 3. Check which fields which are part of the profiling are not yet filled
  // in by the user.
  // Before being able to check the access, we need to initialize the contexts.
  $contexts = progressive_profiling_get_contexts($account, $path);
  $access = progressive_profiling_check_general_access($account, $contexts, $resource_id);
  // Only continue if the conditions for the general settings are met.
  if ($access) {
    $area = progressive_profiling_get_matched_area($account, $contexts, $resource_id);
    // If we found an area, we can search for the next fields which we should
    // ask the user.
    if (!empty($area)) {
      $profile_fields = progressive_profile_get_next_fields($account, $area, $contexts, $resource_id);
    }
  }
  // When we have profile fields, we also want to return the area where these
  // fields will be shown. Based on it, the form may look different.
  if (!empty($profile_fields)) {
    $profile_fields = array(
      'profile_fields' => $profile_fields,
      'area' => $area,
    );
  }
  return $profile_fields;
}

/**
 * Checks the conditions from the general profiling settings.
 *
 * @param object $account
 *  The account for which we check the access.
 *
 * @param $contexts
 *  An array of contexts for the conditions.
 *
 * @param string $resource_id
 *  The id of the resource for which we check the access.
 */
function progressive_profiling_check_general_access($account, $contexts, $resource_id) {
  // First, check if the user has direct access to the resource. If yes, then we
  // will actually return FALSE, because then the user should not see the
  // fields.
  $result = db_select('progressive_profiling_resources_access', 'ppra')->fields('ppra')
    ->condition('ppra.uid', $account->uid)->condition('ppra.resource_id', $resource_id)
    ->execute()->fetch();
  if (!empty($result)) {
    return FALSE;
  }
  // Second, we check the time interval, to make sure we do not ask the user to
  // fill in the fields too often. We store this information also at the area
  // and resource id level, so if we will ever want to have a more fine grained
  // check, we can do that. Currently, we use the same time interval for all the
  // areas and resource ids.
  $result = db_select('progressive_profiling_last_answer_time', 'pplat')->fields('pplat', array('uid', 'timestamp'))
    ->condition('pplat.uid', $account->uid)->orderBy('pplat.timestamp', 'DESC')
    ->execute()->fetch();
  if (!empty($result)) {
    $time_interval = variable_get('progressive_profiling_time_interval', 0);
    // If there is not enough time passed since the last time when the user
    // filled in the fields, we deny the access.
    if (REQUEST_TIME - $result->timestamp < $time_interval) {
      return FALSE;
    }
  }
  ctools_include('context');
  $settings['plugins'] = variable_get('progressive_profiling_conditions', array());
  $settings['logic'] = variable_get('progressive_profiling_conditions_logic', 'and');
  return ctools_access($settings, $contexts);
}

/**
 * Searches for the first area that matches the conditions for a set of
 * contexts.
 *
 * @param object $account
 *  The account for which we check the access.
 *
 * @param $contexts
 *  An array of contexts for the conditions.
 *
 * @param string $resource_id
 *  The id of the resource for which we check the areas.
 */
function progressive_profiling_get_matched_area($account, $contexts, $resource_id = NULL) {
  ctools_include('context');
  $all_areas = progressive_profiling_areas_load_all();
  foreach ($all_areas as $area) {
    // Ignore the disabled areas.
    if (!$area->status) {
      continue;
    }
    // @todo: one more thing to check is if the user already answered
    // questions for this area.
    $settings['plugins'] = !empty($area->configuration['conditions']) ? $area->configuration['conditions'] : array();
    $settings['logic'] = !empty($area->configuration['conditions_logic']) ? $area->configuration['conditions_logic'] : 'and';
    if (ctools_access($settings, $contexts)) {
      return $area;
    }
  }
  return FALSE;
}

/**
 * Given an account and an area of the site, this function will return the next
 * profile fields which the user should be asked.
 *
 * @param object $account
 *  An user account object for which we search for the fields.
 *
 * @param object $area
 *  A profiling area object.
 *
 * @param $contexts
 *  An array of contexts for the conditions.
 *
 * @param string $resource_id
 *  The id of the resource for which we get the fields.
 */
function progressive_profile_get_next_fields($account, $area, $contexts, $resource_id = NULL) {
  ctools_include('context');
  $fields = progressive_profiling_field_load_all();
  $instances = field_info_instances('user', 'user');
  $profile_fields = array();
  $fields_count = 0;
  $max_fields = !empty($area->configuration['questions_nr']) ? $area->configuration['questions_nr'] : 2;
  foreach ($fields as $field_name => $field) {
    if (!$field->status) {
      continue;
    }
    // Skip eventually deleted fields.
    if (empty($instances[$field_name])) {
      continue;
    }
    $field_language = field_language('user', $account, $field_name);
    if (empty($account->{$field_name}[$field_language])) {
      // Check if the conditions of the field match.
      $settings['plugins'] = !empty($field->configuration['conditions']) ? $field->configuration['conditions'] : array();
      $settings['logic'] = !empty($field->configuration['conditions_logic']) ? $field->configuration['conditions_logic'] : 'and';
      if (ctools_access($settings, $contexts)) {
        $profile_fields[$field_name] = $field_name;
        $fields_count++;
        if ($fields_count >= $max_fields) {
          // We reached the maximum number of fields, so just return here.
          break;
        }
      }
    }
  }
  return $profile_fields;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function progressive_profiling_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if (!user_access('administer users') && $form['#user']->uid == $user->uid) {
    // We will alter the access to the fields which are part of the progressive
    // profiling.
    $fields = progressive_profiling_field_load_all();
    $contexts = progressive_profiling_get_contexts();
    // Construct a fake area which only has the qustions number in the
    // configuration, to be able to call progressive_profile_get_next_fields().
    $area = new stdClass();
    // We should never have more than 500 fields.
    $area->configuration['questions_nr'] = 500;
    $available_fields = progressive_profile_get_next_fields($form['#user'], $area, $contexts);
    foreach ($fields as $field_name => $field) {
      if (empty($form[$field_name])) {
        continue;
      }
      $form[$field_name]['#progressive_profile_field'] = TRUE;
      // If the field is available, do nothing.
      if (!empty($available_fields[$field_name])) {
        continue;
      }
      // Also, if the user object already has a value for the field, then do
      // nothing as well.
      $field_language = field_language('user', $form['#user'], $field_name);
      if (!empty($form['#user']->{$field_name}[$field_language])) {
        continue;
      }
      // If we are here, we deny the access to the field because it means the
      // field is part of the progressive profiling, but not in the available
      // fields to be filled at the moment.
      $form[$field_name]['#access'] = FALSE;
    }
  }
}
